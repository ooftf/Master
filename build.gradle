buildscript {
    ext.isMaven = { name ->
        Properties properties = new Properties()
        def file = rootProject.file("${name}/maven.properties")
        if (file.exists()) {
            InputStream inputStream = file.newDataInputStream()
            properties.load(inputStream)
            def str = properties.getProperty('MAVEN')
            if (str == null) {
                return false
            } else {
                return Boolean.parseBoolean(str)
            }
        }
        return false
    }
    ext.mavenVersion = { name ->
        println("mavenVersion::${name}")
        Properties properties = new Properties()
        def file = rootProject.file("${name}/maven.properties")
        if (file.exists()) {
            InputStream inputStream = file.newDataInputStream()
            properties.load(inputStream)
            def str = properties.getProperty('VERSION')
            if (str == null) {
                throw Exception(file.path + "    VERSION == null")
            } else {
                return str
            }
        }
        return ""
    }
    ext.projectCompat = { name ->
        def realName = name.replace(":", "")
        if (isMaven(realName)) {
            return "com.ooftf.project.master:${realName}:${mavenVersion(realName)}"
        } else {
            return project(name)
        }
    }
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
        classpath Kotlins.plugin
        // classpath "com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:$versions.tinkerpatch"
        classpath ("com.tencent.matrix:matrix-gradle-plugin:${MATRIX_VERSION}") { changing = true }
        classpath Deps.packerNG
        classpath ARouter.plugin
        classpath Plugins.autoregister
        classpath Plugins.dokit
        classpath Hilt.plugin

    }

}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
        mavenLocal()
        maven() {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            credentials {
                username '5f0eaf7299d2094b1a8c6600'
                password 'JWiB]Owny)E7'
            }
            url 'https://packages.aliyun.com/maven/repository/2017033-release-61klBZ/'
        }
        maven {
            credentials {
                username 'XeiNW4'
                password 'RR3XPNBSd2'
            }
            url 'https://repo.rdc.aliyun.com/repository/78416-release-TOhjiY/'
        }
        maven {
            credentials {
                username 'XeiNW4'
                password 'RR3XPNBSd2'
            }
            url 'https://repo.rdc.aliyun.com/repository/78416-snapshot-YPE3KZ/'
        }
        maven {url 'https://developer.huawei.com/repo/'}
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }
    }
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.ooftf') {
                if (details.requested.name == 'http-ui-mapping') {
                    details.useTarget(OOFTF.HttpUiMapping)
                } else if (details.requested.name == 'arch-frame-mvvm') {
                    details.useTarget(OOFTF.afm)
                } else if (details.requested.name == 'basic') {
                    details.useTarget(OOFTF.basic)
                } else if (details.requested.name == 'master-widget-statelayout') {
                    details.useTarget(OOFTF.statelayout)
                } else if (details.requested.name == 'master-widget-dialog') {
                    details.useTarget(OOFTF.dialog)
                } else if (details.requested.name == 'ImagePreview') {
                    details.useTarget(OOFTF.imagePreview)
                } else if (details.requested.name == 'kv-layout') {
                    details.useTarget(OOFTF.kvLayout)
                } else if (details.requested.name == 'dataBinging-extensions') {
                    details.useTarget(OOFTF.dataBindingEx)
                } else if (details.requested.name == 'tableview') {
                    details.useTarget('com.github.ooftf:tableview:0.8.9.3.1')
                } else if (details.requested.name == 'master-widget-toolbar') {
                    details.useTarget(OOFTF.toolbar)
                } else if (details.requested.name == 'JLog') {
                    details.useTarget(OOFTF.log)
                } else if (details.requested.name == 'gson-adapter-extensions') {
                    details.useTarget(OOFTF.gsonAdapterExtensions)
                } else if (details.requested.name == 'hi-http') {
                    details.useTarget(OOFTF.HiHttp)
                }
            } else if (details.requested.group == 'com.github.ybq' && details.requested.name == 'Android-SpinKit') {
                details.useTarget(OOFTF.loadingView)
            } else if (details.requested.group == 'com.github.ooftf' && details.requested.name == 'dataBinging-extensions') {
                details.useTarget(OOFTF.dataBindingEx)
            } else if (details.requested.group == 'com.github.razerdp' && details.requested.name == 'BasePopup') {
                details.useTarget('io.github.razerdp:BasePopup:3.1.4')
            } else if (details.requested.group == 'com.youth.banner' && details.requested.name == 'banner') {
                details.useTarget(Deps.banner)
            }

        }
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}
